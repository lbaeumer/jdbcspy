package de.luisoft.jdbc.testdriver;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MyStatement implements Statement {

    private final int rscnt;
    private final int itertime;
    private final int exectime;

    public MyStatement(int rscnt, int itertime, int exectime) {
        this.rscnt = rscnt;
        this.itertime = itertime;
        this.exectime = exectime;
    }

    @Override
    public void addBatch(String sql) {

    }

    @Override
    public void cancel() {

    }

    @Override
    public void clearBatch() {

    }

    @Override
    public void clearWarnings() {

    }

    @Override
    public void close() {

    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public int[] executeBatch() {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return null;
    }

    @Override
    public ResultSet executeQuery(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return new MyResultSet(rscnt, itertime);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public Connection getConnection() {

        return null;
    }

    @Override
    public int getFetchDirection() {

        return 0;
    }

    @Override
    public void setFetchDirection(int direction) {

    }

    @Override
    public int getFetchSize() {

        return 0;
    }

    @Override
    public void setFetchSize(int rows) {

    }

    @Override
    public ResultSet getGeneratedKeys() {

        return null;
    }

    @Override
    public int getMaxFieldSize() {

        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) {

    }

    @Override
    public int getMaxRows() {

        return 0;
    }

    @Override
    public void setMaxRows(int max) {

    }

    @Override
    public boolean getMoreResults() {

        return false;
    }

    @Override
    public boolean getMoreResults(int current) {

        return false;
    }

    @Override
    public int getQueryTimeout() {

        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) {

    }

    @Override
    public ResultSet getResultSet() {

        return new MyResultSet(rscnt, itertime);
    }

    @Override
    public int getResultSetConcurrency() {

        return 0;
    }

    @Override
    public int getResultSetHoldability() {

        return 0;
    }

    @Override
    public int getResultSetType() {

        return 0;
    }

    @Override
    public int getUpdateCount() {

        return 0;
    }

    @Override
    public SQLWarning getWarnings() {

        return null;
    }

    @Override
    public void setCursorName(String name) {

    }

    @Override
    public void setEscapeProcessing(boolean enable) {

    }

    @Override
    public boolean isWrapperFor(Class arg0) {

        return false;
    }

    @Override
    public Object unwrap(Class arg0) {

        return null;
    }

    @Override
    public boolean isClosed() {

        return false;
    }

    @Override
    public boolean isPoolable() {

        return false;
    }

    @Override
    public void setPoolable(boolean poolable) {

    }

    @Override
    public void closeOnCompletion() {

    }

    @Override
    public boolean isCloseOnCompletion() {

        return false;
    }
}
