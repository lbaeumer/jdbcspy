package de.luisoft.jdbc.testdriver;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

public class MyPreparedStatement implements PreparedStatement {

    private final int rscnt;
    private final int itertime;
    private final int exectime;

    public MyPreparedStatement(int rscnt, int itertime, int exectime) {
        this.rscnt = rscnt;
        this.itertime = itertime;
        this.exectime = exectime;
    }

    @Override
    public void addBatch() {

    }

    @Override
    public void clearParameters() {

    }

    @Override
    public boolean execute() {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public ResultSet executeQuery() {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return new MyResultSet(rscnt, itertime);
    }

    @Override
    public int executeUpdate() {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public ResultSetMetaData getMetaData() {

        return new MyResultSetMetaData();
    }

    @Override
    public ParameterMetaData getParameterMetaData() {

        return null;
    }

    @Override
    public void setArray(int arg0, Array arg1) {

    }

    @Override
    public void setAsciiStream(int arg0, InputStream arg1, int arg2) {

    }

    @Override
    public void setBigDecimal(int arg0, BigDecimal arg1) {

    }

    @Override
    public void setBinaryStream(int arg0, InputStream arg1, int arg2) {

    }

    @Override
    public void setBlob(int arg0, Blob arg1) {

    }

    @Override
    public void setBoolean(int arg0, boolean arg1) {

    }

    @Override
    public void setByte(int arg0, byte arg1) {

    }

    @Override
    public void setBytes(int arg0, byte[] arg1) {

    }

    @Override
    public void setCharacterStream(int arg0, Reader arg1, int arg2) {

    }

    @Override
    public void setClob(int arg0, Clob arg1) {

    }

    @Override
    public void setDate(int arg0, Date arg1) {

    }

    @Override
    public void setDate(int arg0, Date arg1, Calendar arg2) {

    }

    @Override
    public void setDouble(int arg0, double arg1) {

    }

    @Override
    public void setFloat(int arg0, float arg1) {

    }

    @Override
    public void setInt(int arg0, int arg1) {

    }

    @Override
    public void setLong(int arg0, long arg1) {

    }

    @Override
    public void setNull(int arg0, int arg1) {

    }

    @Override
    public void setNull(int arg0, int arg1, String arg2) {

    }

    @Override
    public void setObject(int arg0, Object arg1) {

    }

    @Override
    public void setObject(int arg0, Object arg1, int arg2) {

    }

    @Override
    public void setObject(int arg0, Object arg1, int arg2, int arg3) {

    }

    @Override
    public void setRef(int arg0, Ref arg1) {

    }

    @Override
    public void setShort(int arg0, short arg1) {

    }

    @Override
    public void setString(int arg0, String arg1) {

    }

    @Override
    public void setTime(int arg0, Time arg1) {

    }

    @Override
    public void setTime(int arg0, Time arg1, Calendar arg2) {

    }

    @Override
    public void setTimestamp(int arg0, Timestamp arg1) {

    }

    @Override
    public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2) {

    }

    @Override
    public void setURL(int arg0, URL arg1) {

    }

    @Override
    public void setUnicodeStream(int arg0, InputStream arg1, int arg2) {

    }

    @Override
    public void addBatch(String sql) {

    }

    @Override
    public void cancel() {

    }

    @Override
    public void clearBatch() {

    }

    @Override
    public void clearWarnings() {

    }

    @Override
    public void close() {

    }

    @Override
    public boolean execute(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return false;
    }

    @Override
    public int[] executeBatch() {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return null;
    }

    @Override
    public ResultSet executeQuery(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }

        return new MyResultSet(rscnt, itertime);
    }

    @Override
    public int executeUpdate(String sql) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) {

        try {
            Thread.sleep(exectime);
        } catch (Exception ignored) {
        }
        return 0;
    }

    @Override
    public Connection getConnection() {

        return null;
    }

    @Override
    public int getFetchDirection() {

        return 0;
    }

    @Override
    public void setFetchDirection(int direction) {

    }

    @Override
    public int getFetchSize() {

        return 0;
    }

    @Override
    public void setFetchSize(int rows) {

    }

    @Override
    public ResultSet getGeneratedKeys() {

        return null;
    }

    @Override
    public int getMaxFieldSize() {

        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) {

    }

    @Override
    public int getMaxRows() {

        return 0;
    }

    @Override
    public void setMaxRows(int max) {

    }

    @Override
    public boolean getMoreResults() {

        return false;
    }

    @Override
    public boolean getMoreResults(int current) {

        return false;
    }

    @Override
    public int getQueryTimeout() {

        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) {

    }

    @Override
    public ResultSet getResultSet() {

        return new MyResultSet(rscnt, itertime);
    }

    @Override
    public int getResultSetConcurrency() {

        return 0;
    }

    @Override
    public int getResultSetHoldability() {

        return 0;
    }

    @Override
    public int getResultSetType() {

        return 0;
    }

    @Override
    public int getUpdateCount() {

        return 0;
    }

    @Override
    public SQLWarning getWarnings() {

        return null;
    }

    @Override
    public void setCursorName(String name) {

    }

    @Override
    public void setEscapeProcessing(boolean enable) {

    }

    @Override
    public boolean isClosed() {

        return false;
    }

    @Override
    public boolean isPoolable() {

        return false;
    }

    @Override
    public void setPoolable(boolean arg0) {

    }

    @Override
    public boolean isWrapperFor(Class arg0) {

        return false;
    }

    @Override
    public Object unwrap(Class arg0) {

        return null;
    }

    @Override
    public void setAsciiStream(int arg0, InputStream arg1, long arg2) {

    }

    @Override
    public void setAsciiStream(int arg0, InputStream arg1) {

    }

    @Override
    public void setBinaryStream(int arg0, InputStream arg1, long arg2) {

    }

    @Override
    public void setBinaryStream(int arg0, InputStream arg1) {

    }

    @Override
    public void setBlob(int arg0, InputStream arg1, long arg2) {

    }

    @Override
    public void setBlob(int arg0, InputStream arg1) {

    }

    @Override
    public void setCharacterStream(int arg0, Reader arg1, long arg2) {

    }

    @Override
    public void setCharacterStream(int arg0, Reader arg1) {

    }

    @Override
    public void setClob(int arg0, Reader arg1, long arg2) {

    }

    @Override
    public void setClob(int arg0, Reader arg1) {

    }

    @Override
    public void setNCharacterStream(int arg0, Reader arg1, long arg2) {

    }

    @Override
    public void setNCharacterStream(int arg0, Reader arg1) {

    }

    @Override
    public void setNClob(int arg0, NClob arg1) {

    }

    @Override
    public void setNClob(int arg0, Reader arg1, long arg2) {

    }

    @Override
    public void setNClob(int arg0, Reader arg1) {

    }

    @Override
    public void setNString(int arg0, String arg1) {

    }

    @Override
    public void setRowId(int arg0, RowId arg1) {

    }

    @Override
    public void setSQLXML(int arg0, SQLXML arg1) {

    }

    @Override
    public void closeOnCompletion() {

    }

    @Override
    public boolean isCloseOnCompletion() {

        return false;
    }
}
